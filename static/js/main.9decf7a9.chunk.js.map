{"version":3,"sources":["serviceWorker.js","components/ComfirmableButton.js","views/Users.js","views/Speakers.js","components/SpeakerChip.js","views/Schedule.js","views/Results.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","ComfirmableButton","message","children","onSubmit","other","useState","open","setOpen","IconButton","key","onClick","Dialog","fullWidth","disableBackdropClick","disableEscapeKeyDown","DialogTitle","id","DialogContent","dividers","DialogActions","Button","color","useStyles","makeStyles","theme","root","width","marginTop","spacing","overflowX","marginBottom","fab","position","bottom","right","Users","users","classes","useCollection","usersSnapshot","loading","error","CircularProgress","style","top","left","toString","Typography","variant","UsersTable","rows","docs","onRemove","user","admin","doc","delete","onActivate","isActive","update","AddUserDialog","onClose","add","Fab","className","stats","reduce","acc","data","entranceParty","entranceFirstDay","entranceSecondDay","total","party","first","second","Paper","Table","TableHead","TableRow","TableCell","component","align","TableBody","map","row","scope","displayName","email","Scans","type","disabled","Switch","checked","onChange","event","target","useScansStyles","scans","display","positiveItem","flex","textAlign","background","margin","fontSize","lineHeight","negativeItem","Grid","container","justify","alignItems","TextField","label","handleChange","FormControl","InputLabel","htmlFor","Select","native","inputProps","name","defaultValue","value","flexGrow","bio","height","overflow","avatar","Speakers","speakers","storage","speaker","state","setState","speakersSnapshot","SpeakersGrid","onEdit","EditSpeakerDialog","old","onUpdate","set","item","xs","md","Card","CardHeader","Avatar","alt","src","photo","title","CardContent","CardActions","disableSpacing","marginLeft","Photo","url","multiline","uploadRef","setPhoto","ref","e","file","files","child","put","then","snapshot","getDownloadURL","handleClick","click","SpeakerChip","props","Chip","Schedule","slots","slot","orderBy","slotsSnapshot","slotLoading","slotsError","speakersLoading","speakersError","SlotsTable","EditSlotDialog","updateSlotData","start","Number","isInteger","Date","parse","end","content","order","console","log","merge","orderedRows","sort","a","b","size","minWidth","format","locale","pl","renderSpeakers","shrink","NativeSelect","input","Input","min","slotSpeakers","speakersDocs","slotSpeaker","speakerId","find","it","marginRight","gold","tableRegular","backgroundColor","tableLightning","useCollectionData","slotsData","regularTalks","filter","score","scoreA","lightningTalks","cardTitleWhite","table","talk","i","votesCount","TabPanel","role","Box","p","App","db","basename","path","render","Tabs","pathname","centered","Tab","Link","to","collection","firebase","initializeApp","projectId","apiKey","authDomain","storageBucket","ReactDOM","CssBaseline","firestore","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9decf7a9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState } from \"react\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default function ComfirmableButton({ message, children, onSubmit, ...other }) {\n    const [open, setOpen] = useState(false);\n    return [\n        <IconButton key=\"button\" onClick={() => setOpen(true)} {...other}>{children}</IconButton>,\n        <Dialog fullWidth key=\"confirmation\" disableBackdropClick disableEscapeKeyDown open={open}>\n            <DialogTitle id=\"confirmation-dialog-title\">Confirmation</DialogTitle>\n            <DialogContent dividers>\n                <p>{message}</p>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={() => setOpen(false)} color=\"primary\">\n                    Cancel\n                </Button>\n                <Button onClick={() => {\n                    onSubmit();\n                    setOpen(false);\n                }} color=\"primary\">\n                    Ok\n                </Button>\n            </DialogActions>\n        </Dialog>]\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport { Typography } from \"@material-ui/core\";\nimport { useCollection } from \"react-firebase-hooks/firestore\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from '@material-ui/icons/Add';\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@material-ui/core/Select\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Button from \"@material-ui/core/Button\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Switch from \"@material-ui/core/Switch\";\nimport ComfirmableButton from \"../components/ComfirmableButton\";\n\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n        marginTop: theme.spacing(3),\n        overflowX: 'auto',\n        marginBottom: theme.spacing(10)\n    },\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(3),\n        right: theme.spacing(3),\n    },\n}));\n\nexport default function Users({ users }) {\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [usersSnapshot, loading, error] = useCollection(users);\n    if (loading) return <CircularProgress style={{ position: 'absolute', top: '50%', left: '50%' }}/>;\n    if (error) return <p>ERROR: {error.toString()}</p>;\n    return [\n        <Typography key=\"title\" variant=\"h5\">Users</Typography>,\n        <UsersTable key=\"table\" rows={usersSnapshot.docs} onRemove={handleRemove} onActivate={handleActivation}/>,\n        <AddUserDialog key=\"add-user\" open={open} onClose={handleClose} onSubmit={handleSubmit}/>,\n        <Fab key=\"action\" onClick={() => setOpen(true)} className={classes.fab} color=\"secondary\"><AddIcon/></Fab>,\n    ];\n\n    function handleClose() {\n        setOpen(false);\n    }\n\n    function handleSubmit(user) {\n        users.add({ ...user, isActive: true });\n        setOpen(false);\n    }\n\n    function handleRemove(user) {\n        if (!user.admin) users.doc(user.id).delete();\n    }\n\n    function handleActivation(user, isActive) {\n        users.doc(user.id).update({ isActive })\n    }\n}\n\nfunction UsersTable({ rows, onRemove, onActivate }) {\n    const classes = useStyles();\n\n    const stats = rows.reduce((acc, user) => {\n        const { entranceParty, entranceFirstDay, entranceSecondDay} = user.data();\n\n        acc.total += 1;\n        if (entranceParty) acc.party += 1;\n        if (entranceFirstDay) acc.first += 1;\n        if (entranceSecondDay) acc.second += 1;\n        return acc;\n    }, { total: 0, first: 0, second: 0, party: 0 });\n\n    return [\n        <Typography key=\"stats\" variant=\"caption\">\n            total: {stats.total}<br />\n            entrances: (1st day: {stats.first}, 2nd day: {stats.second}, party: {stats.party})\n        </Typography>,\n        <Paper key=\"data\" className={classes.root}>\n            <Table>\n                <TableHead>\n                    <TableRow>\n                        <TableCell component=\"th\">Name</TableCell>\n                        <TableCell component=\"th\">Email</TableCell>\n                        <TableCell component=\"th\">Scans</TableCell>\n                        <TableCell component=\"th\">Type</TableCell>\n                        <TableCell component=\"th\">Actions</TableCell>\n                        <TableCell component=\"th\" align=\"right\">Active</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {rows.map(row => {\n                        const user = { id: row.id, ...row.data() };\n                        return (\n                            <TableRow key={user.id}>\n                                <TableCell scope=\"row\">{user.displayName}</TableCell>\n                                <TableCell scope=\"row\">{user.email}</TableCell>\n                                <TableCell scope=\"row\"><Scans {...user} /></TableCell>\n                                <TableCell scope=\"row\">{user.type}</TableCell>\n                                <TableCell scope=\"row\">\n                                    <ComfirmableButton disabled={user.admin} onSubmit={() => onRemove(user)}\n                                                       message={`Do you really want to remove ${user.displayName}?`}>\n                                        <DeleteIcon/>\n                                    </ComfirmableButton>\n                                </TableCell>\n                                <TableCell align=\"right\">\n                                    <Switch checked={user.isActive}\n                                            onChange={(event) => onActivate(user, event.target.checked)}/>\n                                </TableCell>\n                            </TableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n        </Paper>\n    ];\n}\n\nconst useScansStyles = makeStyles(theme => ({\n    scans: {\n        display: 'flex'\n    },\n    positiveItem: {\n        flex: '0 0 20px',\n        textAlign: 'center',\n        background: '#0f0',\n        margin: '0 1px',\n        fontSize: '10px',\n        lineHeight: '20px'\n    },\n    negativeItem: {\n        flex: '0 0 20px',\n        textAlign: 'center',\n        background: '#f00',\n        margin: '0 1px',\n        fontSize: '10px',\n        lineHeight: '20px'\n    }\n}));\n\nfunction Scans({ entranceParty = false, entranceFirstDay = false, entranceSecondDay = false }) {\n    const classes = useScansStyles();\n    return <div className={classes.scans}>\n        <span className={entranceFirstDay ? classes.positiveItem : classes.negativeItem}>D1</span>\n        <span className={entranceParty ? classes.positiveItem : classes.negativeItem}>P</span>\n        <span className={entranceSecondDay ? classes.positiveItem : classes.negativeItem}>D2</span>\n    </div>\n}\n\nfunction AddUserDialog({ open, onClose, onSubmit }) {\n    const user = {\n        type: 'REGULAR'\n    };\n    return <Dialog open={open} onClose={onClose} fullWidth>\n        <DialogTitle>Add User</DialogTitle>\n        <DialogContent>\n            <Grid container justify=\"center\" alignItems=\"center\">\n                <TextField margin=\"dense\" label=\"name\" type=\"text\" fullWidth onChange={handleChange('displayName')}/>\n                <TextField margin=\"dense\" label=\"email\" type=\"email\" fullWidth onChange={handleChange('email')}/>\n                <FormControl fullWidth>\n                    <InputLabel htmlFor=\"user-type\">type</InputLabel>\n                    <Select native inputProps={{ name: 'type', id: 'user-type' }} onChange={handleChange('type')} defaultValue={user.type}>\n                        <option value={'REGULAR'}>Regular</option>\n                        <option value={'STAFF'}>Staff</option>\n                        <option value={'SPEAKER'}>Speaker</option>\n                    </Select>\n                </FormControl>\n            </Grid>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={onClose} color=\"primary\">Cancel</Button>\n            <Button onClick={() => onSubmit(user)} color=\"primary\">Save</Button>\n        </DialogActions>\n    </Dialog>;\n\n    function handleChange(name) {\n        return (event) => user[name] = event.target.value\n    }\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from \"@material-ui/core\";\nimport { useCollection } from \"react-firebase-hooks/firestore\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport EditIcon from '@material-ui/icons/Edit';\nimport FaceIcon from '@material-ui/icons/Face';\nimport AddIcon from '@material-ui/icons/Add';\nimport Grid from \"@material-ui/core/Grid\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport Fab from \"@material-ui/core/Fab\";\nimport ComfirmableButton from \"../components/ComfirmableButton\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(3),\n        flexGrow: 1,\n        marginBottom: theme.spacing(10)\n    },\n    bio: {\n        height: '175px',\n        overflow: 'auto'\n    },\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(3),\n        right: theme.spacing(3),\n    },\n    avatar: {\n        width: 128,\n        height: 128\n    }\n}));\n\nexport default function Speakers({ speakers, storage }) {\n    const classes = useStyles();\n    const [state, setState] = useState({ open: false, speaker: {} });\n    const [speakersSnapshot, loading, error] = useCollection(speakers);\n    if (loading) return <CircularProgress style={{ position: 'absolute', top: '50%', left: '50%' }}/>;\n    if (error) return <p>ERROR: {error.toString()}</p>;\n    return [\n        <Typography key=\"title\" variant=\"h5\">Edit speakers</Typography>,\n        <SpeakersGrid key=\"grid\" rows={speakersSnapshot.docs} onEdit={handleEdit} onRemove={handleRemove}/>,\n        <EditSpeakerDialog key=\"edit-speaker\" speaker={state.speaker} open={state.open} onClose={handleClose}\n                           onUpdate={handleUpdate} storage={storage}/>,\n        <Fab key=\"action\" onClick={() => setState({ open: true, speaker: {} })} className={classes.fab}\n             color=\"secondary\"><AddIcon/></Fab>\n    ];\n\n    function handleEdit(speaker) {\n        setState({ open: true, speaker });\n    }\n\n    function handleClose() {\n        setState((old) => ({ ...old, open: false }));\n    }\n\n    function handleUpdate(speaker) {\n        if (speaker.id) {\n            speakers.doc(speaker.id).set(speaker);\n        } else {\n            speakers.add(speaker);\n        }\n        setState((old) => ({ ...old, open: false }));\n    }\n\n    function handleRemove(speaker) {\n        speakers.doc(speaker.id).delete();\n    }\n}\n\nfunction SpeakersGrid({ rows, onEdit, onRemove }) {\n    const classes = useStyles();\n    return <div className={classes.root}>\n        <Grid container spacing={3}>\n            {rows.map(row => {\n                const speaker = { id: row.id, ...row.data() };\n                return <Grid item xs={12} md={4} key={speaker.id}>\n                    <Card>\n                        <CardHeader avatar={<Avatar alt={speaker.name} src={speaker.photo}/>} title={speaker.name}/>\n                        <CardContent className={classes.bio}>\n                            <Typography variant=\"caption\" color=\"textSecondary\" component=\"p\">{speaker.bio}</Typography>\n                        </CardContent>\n                        <CardActions disableSpacing>\n                            <IconButton style={{ marginLeft: 'auto' }} onClick={() => onEdit(speaker)}>\n                                <EditIcon/>\n                            </IconButton>\n                            <ComfirmableButton onSubmit={() => onRemove(speaker)}\n                                               message={`Do you really want to remove ${speaker.name}?`}>\n                                <DeleteIcon/>\n                            </ComfirmableButton>\n                        </CardActions>\n                    </Card>\n                </Grid>\n            })}\n        </Grid>\n    </div>;\n}\n\nfunction EditSpeakerDialog({ speaker, open, onClose, onUpdate, storage }) {\n    return <Dialog open={open} onClose={onClose} fullWidth>\n        <DialogTitle>{speaker.name ? \"Edit Speaker\" : \"Add Speaker\"}</DialogTitle>\n        <DialogContent>\n            <Grid container justify=\"center\" alignItems=\"center\">\n                <Photo speaker={speaker} storage={storage} onUpdate={(url) => speaker.photo = url}/>\n                <TextField margin=\"dense\" label=\"name\" type=\"text\" fullWidth defaultValue={speaker.name}\n                           onChange={handleChange('name')}/>\n                <TextField multiline margin=\"dense\" label=\"bio\" type=\"text\" fullWidth defaultValue={speaker.bio}\n                           onChange={handleChange('bio')}/>\n            </Grid>\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={onClose} color=\"primary\">Cancel</Button>\n            <Button onClick={() => onUpdate(speaker)} color=\"primary\">Save</Button>\n        </DialogActions>\n    </Dialog>;\n\n    function handleChange(name) {\n        return (event) => speaker[name] = event.target.value\n    }\n}\n\nfunction Photo({ speaker, storage, onUpdate }) {\n    const classes = useStyles();\n    const [photo, setPhoto] = useState(speaker.photo);\n    let uploadRef;\n    const input = <input key=\"file\" type=\"file\" ref={(ref) => uploadRef = ref} style={{ display: 'none' }}\n                         onChange={handleUpload}/>;\n    const avatar = photo ?\n        <Avatar key=\"avatar\" onClick={handleClick} alt={speaker.name} src={speaker.photo} className={classes.avatar}/> :\n        <Avatar key=\"avatar\" onClick={handleClick} alt={speaker.name} className={classes.avatar}>\n            <FaceIcon className={classes.avatar}/>\n        </Avatar>;\n    return [input, avatar];\n\n    function handleClick() {\n        uploadRef.click();\n    }\n\n    function handleUpload(e) {\n        const file = e.target.files[0];\n        storage.child(file.name).put(file)\n            .then(snapshot => snapshot.ref.getDownloadURL())\n            .then(url => {\n                onUpdate(url);\n                setPhoto(url);\n            });\n    }\n}\n","import Chip from \"@material-ui/core/Chip\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport FaceIcon from \"@material-ui/core/SvgIcon/SvgIcon\";\nimport React from \"react\";\n\nexport default function SpeakerChip({ speaker, ...props }) {\n    return <Chip\n        avatar={speaker.photo ? <Avatar src={speaker.photo}/> : <Avatar><FaceIcon/></Avatar>}\n        label={speaker.name}\n        {...props}\n    />\n}\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from \"@material-ui/core\";\nimport { useCollection } from \"react-firebase-hooks/firestore\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport AddIcon from '@material-ui/icons/Add';\nimport Fab from \"@material-ui/core/Fab\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Table from \"@material-ui/core/Table\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport { format } from 'date-fns';\nimport { pl } from 'date-fns/locale';\nimport SpeakerChip from \"../components/SpeakerChip\";\nimport ComfirmableButton from \"../components/ComfirmableButton\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Input from \"@material-ui/core/Input\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(3),\n        flexGrow: 1,\n        marginBottom: theme.spacing(10)\n    },\n    bio: {\n        height: '175px',\n        overflow: 'auto'\n    },\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(3),\n        right: theme.spacing(3),\n    },\n    avatar: {\n        width: 128,\n        height: 128\n    }\n}));\n\nexport default function Schedule({ slots, speakers }) {\n    const classes = useStyles();\n    const [state, setState] = useState({ open: false, slot: {} });\n    const [slotsSnapshot, slotLoading, slotsError] = useCollection(slots.orderBy('start'));\n    const [speakersSnapshot, speakersLoading, speakersError] = useCollection(speakers);\n    if (slotLoading || speakersLoading) return <CircularProgress\n        style={{ position: 'absolute', top: '50%', left: '50%' }}/>;\n    if (slotsError || speakersError) return <p>ERROR: {slotsError.toString() + speakersError.toString()}</p>;\n    return [\n        <Typography key=\"title\" variant=\"h5\">Edit schedule</Typography>,\n        <SlotsTable key=\"table\" rows={slotsSnapshot.docs} speakers={speakersSnapshot.docs} onEdit={handleEdit}\n                    onRemove={handleRemove}/>,\n        <EditSlotDialog key=\"edit-slot\" slot={state.slot} open={state.open} onClose={handleClose}\n                        onUpdate={handleUpdate} speakers={speakersSnapshot.docs} />,\n        <Fab key=\"action\" onClick={() => setState((old) => ({ open: true, slot: {} }))} className={classes.fab}\n             color=\"secondary\"><AddIcon/></Fab>\n    ];\n\n    function handleEdit(slot) {\n        setState({ open: true, slot });\n    }\n\n    function handleClose() {\n        setState((old) => ({ ...old, open: false }));\n    }\n\n    function handleUpdate(slot) {\n\n        const updateSlotData = {\n            start: Number.isInteger(slot.start) ? slot.start : Date.parse(slot.start),\n            end: Number.isInteger(slot.end) ? slot.end : Date.parse(slot.end),\n            title: slot.title,\n            type: slot.type,\n            content: slot.content,\n            order: slot.order\n        };\n\n        console.log({ slot, updateSlotData });\n\n        if (slot.id) {\n            slots.doc(slot.id).set(updateSlotData, { merge: true });\n        } else {\n            slots.add(updateSlotData);\n        }\n        setState((old) => ({ ...old, open: false }));\n    }\n\n    function handleRemove(slot) {\n        slots.doc(slot.id).delete();\n    }\n}\n\nfunction SlotsTable({ rows, speakers, onEdit, onRemove }) {\n    const classes = useStyles();\n    const orderedRows = rows.sort((a, b) => {\n        const timeComparison = a.start - b.start;\n        return timeComparison || ((a.order || 0) - (b.order || 0));\n    });\n    return (\n        <Paper className={classes.root}>\n            <Table size=\"small\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell component=\"th\">Day</TableCell>\n                        <TableCell component=\"th\">Start</TableCell>\n                        <TableCell component=\"th\">End</TableCell>\n                        <TableCell component=\"th\">Type</TableCell>\n                        <TableCell component=\"th\">Order</TableCell>\n                        <TableCell component=\"th\">Title</TableCell>\n                        <TableCell component=\"th\" style={{ minWidth: 400 }}>Speakers</TableCell>\n                        <TableCell style={{ minWidth: 145 }} component=\"th\">Actions</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {orderedRows.map(row => {\n                        const slot = { id: row.id, ...row.data() };\n                        return (\n                            <TableRow key={slot.id}>\n                                <TableCell\n                                    scope=\"row\">{format(new Date(slot.start), 'EEEE', { locale: pl })}</TableCell>\n                                <TableCell\n                                    scope=\"row\">{format(new Date(slot.start), 'H:mm:ss', { locale: pl })}</TableCell>\n                                <TableCell\n                                    scope=\"row\">{format(new Date(slot.end), 'H:mm:ss', { locale: pl })}</TableCell>\n                                <TableCell scope=\"row\">{slot.type}</TableCell>\n                                <TableCell scope=\"row\">{slot.order}</TableCell>\n                                <TableCell scope=\"row\">{slot.title}</TableCell>\n                                <TableCell\n                                    scope=\"row\">{renderSpeakers(slot.speakers, speakers)}</TableCell>\n                                <TableCell>\n                                    <IconButton onClick={() => onEdit(slot)}><EditIcon/></IconButton>\n                                    <ComfirmableButton onSubmit={() => onRemove(slot)}\n                                                       message={`Do you really want to remove ${slot.title}?`}>\n                                        <DeleteIcon/>\n                                    </ComfirmableButton>\n                                </TableCell>\n                            </TableRow>\n                        );\n                    })}\n                </TableBody>\n            </Table>\n        </Paper>\n    );\n}\n\nfunction EditSlotDialog({ slot, open, onClose, onUpdate, speakers }) {\n    const start = slot.start ? new Date(slot.start) : new Date();\n    const end = slot.end ? new Date(slot.end) : new Date();\n    return <Dialog open={open} onClose={onClose} fullWidth>\n        <DialogTitle>{slot.title ? \"Edit Slot\" : \"Add Slot\"}</DialogTitle>\n        <DialogContent>\n            <TextField margin=\"dense\" label=\"title\" type=\"text\" fullWidth defaultValue={slot.title}\n                       onChange={handleChange('title')}/>\n            <TextField margin=\"dense\" label=\"content\" type=\"text\" fullWidth defaultValue={slot.content} multiline\n                       onChange={handleChange('content')}/>\n            <TextField margin=\"dense\" label=\"start\" type=\"datetime-local\" fullWidth\n                       defaultValue={format(start, 'yyyy-MM-dd\\'T\\'HH:mm', { locale: pl })}\n                       onChange={handleChange('start')}/>\n            <TextField margin=\"dense\" label=\"end\" type=\"datetime-local\" fullWidth\n                       defaultValue={format(end, 'yyyy-MM-dd\\'T\\'HH:mm', { locale: pl })}\n                       onChange={handleChange('end')}/>\n            <FormControl margin=\"dense\" fullWidth>\n                <InputLabel shrink>type</InputLabel>\n                <NativeSelect defaultValue={slot.type} input={<Input onChange={handleChange('type')}/>}>\n                    <option value=\"TALK\">TALK</option>\n                    <option value=\"TECHNICAL\">TECHNICAL</option>\n                    <option value=\"LIGHTNING\">LIGHTNING</option>\n                </NativeSelect>\n            </FormControl>\n            <TextField margin=\"dense\" label=\"order\" type=\"number\" fullWidth defaultValue={slot.order}\n                       onChange={handleChange('order')} inputProps={{ min: 0 }}/>\n\n            {renderSpeakers(slot.speakers, speakers)}\n        </DialogContent>\n        <DialogActions>\n            <Button onClick={onClose} color=\"primary\">Cancel</Button>\n            <Button onClick={() => onUpdate(slot)} color=\"primary\">Save</Button>\n        </DialogActions>\n    </Dialog>;\n\n    function handleChange(name) {\n        return (event) => slot[name] = event.target.value\n    }\n}\n\nfunction renderSpeakers(slotSpeakers = [], speakersDocs = []) {\n    return slotSpeakers\n        .map(slotSpeaker => slotSpeaker.id)\n        .map(speakerId => speakersDocs.find(it => it.id === speakerId))\n        .map(speaker => <SpeakerChip key={speaker.id} speaker={speaker.data()} style={{ marginRight: 10 }}/>);\n}","import React, { Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography } from \"@material-ui/core\";\nimport { useCollection, useCollectionData } from \"react-firebase-hooks/firestore\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from \"@material-ui/core/Paper\";\nimport SpeakerChip from \"../components/SpeakerChip\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nconst gold = 'rgba(214, 175, 54, 0.3)';\nconst silver = 'rgba(215, 215, 215, 0.3)';\nconst bronze = 'rgba(167, 112, 68, 0.1)';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        marginTop: theme.spacing(3),\n        flexGrow: 1,\n        marginBottom: theme.spacing(10)\n    },\n    bio: {\n        height: '175px',\n        overflow: 'auto'\n    },\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(3),\n        right: theme.spacing(3),\n    },\n    avatar: {\n        width: 128,\n        height: 128\n    },\n    tableRegular: {\n        '& tbody tr:nth-child(-n+3)': {\n            backgroundColor: bronze\n        },\n        '& tbody tr:nth-child(-n+2)': {\n            backgroundColor: silver\n        },\n        '& tbody tr:nth-child(-n+1)': {\n            backgroundColor: gold\n        }\n    },\n    tableLightning: {\n        '& tbody tr:nth-child(-n+1)': {\n            backgroundColor: gold\n        }\n    }\n}));\n\nexport default function Schedule({ slots, speakers }) {\n    const classes = useStyles();\n\n    const [slotsData, slotLoading, slotsError] = useCollectionData(slots.orderBy('start'));\n    const [speakersSnapshot, speakersLoading, speakersError] = useCollection(speakers);\n\n    if (slotLoading || speakersLoading) {\n        return <CircularProgress style={{ position: 'absolute', top: '50%', left: '50%' }}/>;\n    }\n\n    if (slotsError || speakersError) {\n        return <p>ERROR: {slotsError.toString() + speakersError.toString()}</p>;\n    }\n\n    const regularTalks = slotsData\n        .filter(item => item.type === 'TALK')\n        .sort(({ score: scoreA = 0}, { score: scoreB = 0}) => scoreB - scoreA);\n\n\n    const lightningTalks = slotsData\n        .filter(item => item.type === 'LIGHTNING')\n        .sort(({ score: scoreA = 0}, { score: scoreB = 0}) => scoreB - scoreA);\n\n    function renderSpeakers(slotSpeakers) {\n        return slotSpeakers\n            .map(({ id }) => speakersSnapshot.docs.find(speaker => speaker.id === id))\n            .map(speaker => <SpeakerChip key={speaker.id} speaker={speaker.data()} style={{ marginRight: 10 }}/>);\n    }\n\n    return (\n        <Fragment>\n\n\n\n            <Typography key=\"title\" variant=\"h5\">Voting results</Typography>\n\n            <Grid container spacing={10}>\n                <Grid item xs={6}>\n                    <h4 className={classes.cardTitleWhite}>Regular Talks</h4>\n                    <Paper className={classes.root}>\n                        <Table className={classes.table} size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Rank</TableCell>\n                                    <TableCell>Score (Votes Count)</TableCell>\n                                    <TableCell>Title</TableCell>\n                                    <TableCell>Speakers</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {\n                                    regularTalks.map((talk, i) => (\n                                        <TableRow key={talk.title}>\n                                            <TableCell>{i + 1}</TableCell>\n                                            <TableCell>{`${talk.score || 0} (${talk.votesCount || 0})`}</TableCell>\n                                            <TableCell>{talk.title}</TableCell>\n                                            <TableCell>{renderSpeakers(talk.speakers || [])}</TableCell>\n                                        </TableRow>\n                                    ))\n                                }\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </Grid>\n\n                <Grid item xs={6}>\n                    <h4 className={classes.cardTitleWhite}>Lightning Talks</h4>\n                    <Paper className={classes.root}>\n                        <Table className={classes.table} size=\"small\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Rank</TableCell>\n                                    <TableCell>Score (Votes Count)</TableCell>\n                                    <TableCell>Title</TableCell>\n                                    <TableCell>Speakers</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {\n                                    lightningTalks.map((talk, i) => (\n                                        <TableRow key={talk.title}>\n                                            <TableCell>{i + 1}</TableCell>\n                                            <TableCell>{`${talk.score || 0} (${talk.votesCount || 0})`}</TableCell>\n                                            <TableCell>{talk.title}</TableCell>\n                                            <TableCell>{renderSpeakers(talk.speakers || [])}</TableCell>\n                                        </TableRow>\n                                    ))\n                                }\n                            </TableBody>\n                        </Table>\n                    </Paper>\n                </Grid>\n\n            </Grid>\n        </Fragment>\n    );\n}","import React, { Fragment } from 'react';\nimport { Switch, Route, Link, BrowserRouter } from \"react-router-dom\";\nimport AppBar from \"@material-ui/core/AppBar/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\n\nimport Users from \"./views/Users\";\nimport Speakers from \"./views/Speakers\";\nimport Schedule from \"./views/Schedule\";\nimport Results from \"./views/Results\";\n\nfunction App({ db, storage }) {\n    return (\n        <BrowserRouter basename=\"/atm-event-admin\">\n            <Route\n                path=\"/\"\n                render={({ location }) => (\n                    <Fragment>\n                        <AppBar position=\"static\" key=\"appbar\">\n                            <Tabs value={location.pathname} component=\"div\" centered variant=\"fullWidth\">\n                                <Tab label=\"Home\" value=\"/\" component={Link} to=\"/\" />\n                                <Tab label=\"Users\" value=\"/users\" component={Link} to=\"/users\" />\n                                <Tab label=\"Speakers\" value=\"/speakers\" component={Link} to=\"/speakers\" />\n                                <Tab label=\"Schedule\" value=\"/schedule\" component={Link} to=\"/schedule\" />\n                                <Tab label=\"Results\" value=\"/results\" component={Link} to=\"/results\" />\n                            </Tabs>\n                        </AppBar>\n                        <Switch>\n                            <Route path=\"/users\" render={() => <TabPanel><Users users={db.collection('users')}/></TabPanel>} />\n                            <Route path=\"/speakers\" render={() => <TabPanel><Speakers speakers={db.collection('speakers')} storage={storage.ref()}/></TabPanel>} />\n                            <Route path=\"/schedule\" render={() => <TabPanel><Schedule slots={db.collection('schedule')} speakers={db.collection('speakers')}/></TabPanel>} />\n                            <Route path=\"/results\" render={() => <TabPanel><Results slots={db.collection('schedule')} speakers={db.collection('speakers')}/></TabPanel>} />\n                        </Switch>\n                    </Fragment>\n                )}\n            />\n        </BrowserRouter>\n    );\n}\n\nfunction TabPanel({ children }) {\n    return (\n        <Typography component=\"section\" role=\"tabpanel\">\n            <Box p={3}>{children}</Box>\n        </Typography>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/storage\";\nimport \"firebase/messaging\";\nimport firebase from \"firebase/app\";\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nfirebase.initializeApp({\n    projectId: \"atm-voting\",\n    apiKey: \"AIzaSyDwGFsr2F-ju_u162LengdX2BeGZ_Bh4Xw\",\n    authDomain: \"firebase-adminsdk-99hyc@atm-voting.iam.gserviceaccount.com\",\n    storageBucket: \"atm-voting.appspot.com\"\n});\n\nwindow.firebase = firebase;\n\nReactDOM.render([\n    <CssBaseline key=\"css\"/>,\n    <App key=\"app\" db={firebase.firestore()} storage={firebase.storage()}/>\n], document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}